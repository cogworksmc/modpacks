name: Package the Create Modpack

on:
  push:
    paths:
      - 'create/**'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Build Directory
        run: |
          mkdir -p build
          zip -r build/create-modpack.zip ./create/overrides/ ./create/manifest.json ./create/modrinth.index.json

      - name: Determine Version Number
        id: determine_version
        run: |
          VERSION_FILE="version.txt"
          if [ ! -f $VERSION_FILE ]; then
            echo "1.0.0" > $VERSION_FILE
          fi
          CURRENT_VERSION=$(cat $VERSION_FILE)
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          if [[ "${{ github.event.head_commit.message }}" == *"[Server]"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ github.event.head_commit.message }}" == *"[Update]"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "${{ github.event.head_commit.message }}" == *"[Patch]"* ]]; then
            PATCH=$((PATCH + 1))
          fi
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo $NEW_VERSION > $VERSION_FILE
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Collect Changelogs
        id: collect_changelogs
        run: |
          PREVIOUS_VERSION=$(git describe --tags --abbrev=0)
          CHANGELOGS=$(git log $PREVIOUS_VERSION..HEAD --pretty=format:"%s" | grep -oP '(?<=\[Changelog\]: ).*')
          echo "changelogs=$CHANGELOGS" >> $GITHUB_ENV

      - name: Upload Modpack to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Create Release v${{ env.new_version }}"
          tag_name: "Create-v${{ env.new_version }}"
          generate_release_notes: true
          make_latest: true
          files: build/create-modpack.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Configure Wrangler
        run: |
          wrangler login
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      - name: Upload to Cloudflare R2
        run: |
          wrangler r2 object put cogworks/modpacks/create-modpack.zip --file build/create-modpack.zip
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}

      - name: Notify Success
        run: echo "Modpack successfully built & uploaded to GitHub and Cloudflare R2!"

      - name: Send Discord Notification
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                     "embeds": [{
                       "title": "New Modpack Version Released!",
                       "description": "Version v${{ env.new_version }} has been released.",
                       "fields": [
                         {
                           "name": "Changelogs",
                           "value": "'"${{ env.changelogs }}"'"
                         }
                       ],
                       "color": 5814783
                     }]
                   }' \
               ${{ secrets.DISCORD_WEBHOOK_URL }}